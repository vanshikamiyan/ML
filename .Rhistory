filtered_data <- numeric_columns %>% select(all_of(relevant_vars))
filtered_cor_matrix <- cor(filtered_data, use = "complete.obs")
print(filtered_cor_matrix)
ggcorrplot(filtered_cor_matrix, method = "square", type = "upper", lab = TRUE, lab_size = 3,
title = "Correlation Matrix",
colors = c("lightgreen", "white", "blue"),
legend.title = "Correlation")
numeric_columns <- housing %>% select(where(is.numeric))
cors <- cor(numeric_columns, use = "pairwise.")
library(RColorBrewer)
ggcorrplot(cors, col = brewer.pol(n=8, name = "RdYlBu"))
housing <- read.csv(file.choose())
# Exploratory Data Analysis
str(data)  # Structure of the dataset
summary(data)  # Descriptive statistics
# Exploratory Data Analysis
str(housing)  # Structure of the dataset
summary(housing)  # Descriptive statistics
# Check for missing values
missing_values <- colSums(is.na(housing)) / nrow(housing) * 100
missing_over_5 <- names(missing_values[missing_values > 5])
print(missing_over_5)  # Features with more than 5% missing values
housing <- read.csv(file.choose())
options(scipen = 100)
library(ggplot2)
library(dplyr)
library(ggcorrplot)
head(housing)
tail(housing)
str(housing)
summary(housing)
colnames(housing)
sum(is.na(housing))
colSums(is.na(housing))
ggplot(data=housing, aes(x = SalePrice)) +
geom_histogram(fill = "lightgreen", color = "darkgreen") +
ggtitle("Sales Price Distribution") +
xlab("Sales Price") +
ylab("Number of Houses") +
theme(axis.title.x = element_text(color = "darkgreen", size = 10),
axis.title.y = element_text(color = "darkgreen", size = 10),
plot.title = element_text(color = "darkgreen", size = 20))
ggplot(data=housing, aes(x = factor(Neighborhood))) +
geom_bar(fill = "darkgreen") +
ggtitle("Number of Houses across Neighborhoods") +
xlab("Neighborhood") +
ylab("Number of Houses") +
theme(axis.title.x = element_text(color = "darkgreen", size = 10),
axis.title.y = element_text(color = "darkgreen", size = 10),
plot.title = element_text(color = "darkgreen", size = 20),
axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data=housing, aes(x=SalePrice))+
geom_boxplot(color = "darkgreen", fill = "lightgreen") +
ggtitle("Boxplot of Sales Price") +
xlab("Sale Price") +
theme(axis.title.x = element_text(color = "darkgreen", size = 10),
axis.title.y = element_text(color = "darkgreen", size = 10),
plot.title = element_text(color = "darkgreen", size = 20))
housing$Yr.Sold <- as.factor(housing$Yr.Sold)
ggplot(data = housing, aes(x = SalePrice)) +
geom_histogram(aes(fill = Yr.Sold), color = "black") +
facet_grid(Yr.Sold ~., scales = "free") +
ggtitle("Selling Price across Years") +
xlab("Sales Price") +
ylab("Number of Houses") +
theme(axis.title.x = element_text(color = "black", size = 10),
axis.title.y = element_text(color = "black", size = 10),
plot.title = element_text(color = "black", size = 20),)
for(col in names(housing)){
if(is.numeric(housing[[col]])) {
housing[[col]][is.na(housing[[col]])] <- median(housing[[col]], na.rm = TRUE)
}
}
missing_value <- (colSums(is.na(housing)) / nrow(housing)) * 100
missing_value <- missing_value[missing_value > 5]
missing_value <- data.frame(missing_value)
View(missing_value)
num_data <- housing %>% select(where(is.numeric))
cor_matrix <- cor(num_data, use = "complete.obs")
print(cor_matrix)
numeric_columns <- housing %>% select(where(is.numeric))
# Compute the correlation matrix
cor_matrix <- cor(numeric_columns, use = "complete.obs")
threshold <- 0.5
relevant_vars <- names(cor_matrix["SalePrice", ][abs(cor_matrix["SalePrice", ]) > threshold])
newdata <- numeric_columns %>% select(all_of(relevant_vars))
newdata_matrix <- cor(newdata, use = "complete.obs")
print(newdata_matrix)
ggcorrplot(newdata_matrix, method = "square", type = "upper", lab = TRUE, lab_size = 3,
title = "Correlation Matrix",
colors = c("lightgreen", "white", "blue"),
legend.title = "Correlation")
numcol <- housing %>% select(where(is.numeric))
cors <- cor(numcol, use = "pairwise.")
ggcorrplot(newdata_matrix,
colors = c("blue", "white", "darkgreen"),
lab = TRUE,
title = "Correlation Matrix",
legend.title = "Correlation") +
theme(
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 1, size = 8, color = "black"),
axis.text.y = element_text(size = 8, color = "black"),
plot.title = element_text(size = 15, face = "bold", hjust = 0.5)
)
cor_sp <- cor_matrix["SalePrice",]
cor_sp <- cor_sp[!names(cor_sp) %in% "Saleprice"]
high_cor <- names(sort(cor_sp, decreasing = TRUE))[1]
low_cor <- names(sort(cor_sp, decreasing = FALSE))[1]
close_cor <- names(which.min(abs(cor_sp - 0.5)))
ggplot(housing, aes(x= .data[[high_cor]], y = SalePrice)) +
geom_point(color = "darkblue", alpha = 0.6) +
ggtitle(paste("Scatter Plot: SalePrice vs", high_cor)) +
xlab(high_cor) +
ylab("SalePrice")
str(housing$Yr.Sold)
str(housing$Gr.Liv.Area)
ggplot(housing, aes(x= .data[[low_cor]], y = SalePrice)) +
geom_point(color = "darkblue", alpha = 0.3) +
ggtitle(paste("Scatter Plot: SalePrice vs", low_cor)) +
xlab(low_cor) +
ylab("SalePrice")
ggplot(housing, aes(x= .data[[close_cor]], y = SalePrice)) +
geom_point(color = "darkblue", alpha = 0.6) +
ggtitle(paste("Scatter Plot: SalePrice vs", close_cor)) +
xlab(close_cor) +
ylab("SalePrice")
numcol <- housing %>% select(where(is.numeric))
cor_matrix <- cor(numcol, use = "complete.obs")
cor_sp <- cor_matrix["SalePrice", ]
cor_sp <- cor_sp[!names(cor_sp) %in% "SalePrice"]
top4 <- names(sort(cor_sp, decreasing = TRUE)[1:4])
formula <- as.formula(paste("SalePrice ~", paste(top4, collapse = " + ")))
reg_model <- lm(formula, data = housing)
summary(reg_model)
library(broom)
model_coefficients <- coef(reg_model)
reg_eq <- paste0(
"SalePrice = ", round(model_coefficients[1], 2), " + ",
paste0(round(model_coefficients[-1], 2), " * ", names(model_coefficients[-1]), collapse = " + ")
)
cat("Regression Equation:\n", regression_equation, "\n\n")
library(broom)
model_summary <- tidy(reg_model)
print(model_summary)
par(mfrow = c(2, 2))
plot(reg_model)
par(mfrow = c(1, 1))
library(car)
vif_values <- vif(reg_model)
print("VIF Values:")
print(vif_values)
if (any(vif_values > 5)) {
cat("Some variables have VIF > 5, indicating multicollinearity.\n")
} else {
cat("No significant multicollinearity detected (all VIF <= 5).\n")
}
std_residuals <- rstandard(reg_model)
outliers <- which(abs(std_residuals) > 3)
cat("Potential Outliers:\n")
print(outliers)
if (length(outliers) > 0) {
data_no_outliers <- housing[-outliers, ]
reg_model_no_outliers <- lm(formula, data = data_no_outliers)
cat("Model refitted after removing outliers.\n")
} else {
cat("No significant outliers detected.\n")
}
if (exists("reg_model_no_outliers")) {
cat("Summary of Original Model:\n")
summary(reg_model)
cat("Summary of Model Without Outliers:\n")
summary(reg_model_no_outliers)
}
library(leaps)
numeric_columns <- housing %>% select(where(is.numeric))
all_subsets <- regsubsets(SalePrice ~ ., data = numeric_columns, nvmax = 4)  # Limit to top 4 features
summary_all_subsets <- summary(all_subsets)
cat("Best 1-feature model:\n")
print(names(coef(all_subsets, 1)))
cat("\nBest 2-feature model:\n")
print(names(coef(all_subsets, 2)))
cat("\nBest 3-feature model:\n")
print(names(coef(all_subsets, 3)))
cat("\nBest 4-feature model:\n")
print(names(coef(all_subsets, 4)))
best_4_feature_model <- coef(all_subsets, 4)
cat("\nBest 4-Feature Model Equation:\n")
print(paste0(
"SalePrice = ", round(best_4_feature_model[1], 2), " + ",
paste0(round(best_4_feature_model[-1], 2), " * ", names(best_4_feature_model[-1]), collapse = " + ")
))
cat("Comparison of Models:\n")
summary(reg_model)
summary(reg_model_no_outliers)
summary(housing)
summary(housing)
missing_value <- (colSums(is.na(housing)) / nrow(housing)) * 100
missing_value <- missing_value[missing_value > 5]
missing_value <- data.frame(missing_value)
View(missing_value)
colSums(is.na(housing))
ggplot(data=housing, aes(x = SalePrice)) +
geom_histogram(fill = "lightgreen", color = "darkgreen") +
ggtitle("Sales Price Distribution") +
xlab("Sales Price") +
ylab("Number of Houses") +
theme(axis.title.x = element_text(color = "darkgreen", size = 10),
axis.title.y = element_text(color = "darkgreen", size = 10),
plot.title = element_text(color = "darkgreen", size = 20))
ggplot(data=housing, aes(x = factor(Neighborhood))) +
geom_bar(fill = "darkgreen") +
ggtitle("Number of Houses across Neighborhoods") +
xlab("Neighborhood") +
ylab("Number of Houses") +
theme(axis.title.x = element_text(color = "darkgreen", size = 10),
axis.title.y = element_text(color = "darkgreen", size = 10),
plot.title = element_text(color = "darkgreen", size = 20),
axis.text.x = element_text(angle = 90, hjust = 1))
# Compute the correlation matrix
cor_matrix <- cor(numeric_columns, use = "complete.obs")
cor_matrix
cor_matrix
ggcorrplot(newdata_matrix, method = "square", type = "upper", lab = TRUE, lab_size = 3,
title = "Correlation Matrix",
colors = c("lightgreen", "white", "blue"),
legend.title = "Correlation")
ggcorrplot(newdata_matrix,
colors = c("blue", "white", "darkgreen"),
lab = TRUE,
title = "Correlation Matrix",
legend.title = "Correlation") +
theme(
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 1, size = 8, color = "black"),
axis.text.y = element_text(size = 8, color = "black"),
plot.title = element_text(size = 15, face = "bold", hjust = 0.5)
)
high_cor <- names(sort(cor_sp, decreasing = TRUE))[1]
low_cor <- names(sort(cor_sp, decreasing = FALSE))[1]
close_cor <- names(which.min(abs(cor_sp - 0.5)))
ggplot(housing, aes(x= .data[[high_cor]], y = SalePrice)) +
geom_point(color = "darkblue", alpha = 0.6) +
ggtitle(paste("Scatter Plot: SalePrice vs", high_cor)) +
xlab(high_cor) +
ylab("SalePrice")
ggplot(housing, aes(x= .data[[low_cor]], y = SalePrice)) +
geom_point(color = "darkblue", alpha = 0.3) +
ggtitle(paste("Scatter Plot: SalePrice vs", low_cor)) +
xlab(low_cor) +
ylab("SalePrice")
ggplot(housing, aes(x= .data[[close_cor]], y = SalePrice)) +
geom_point(color = "darkblue", alpha = 0.6) +
ggtitle(paste("Scatter Plot: SalePrice vs", close_cor)) +
xlab(close_cor) +
ylab("SalePrice")
numcol <- housing %>% select(where(is.numeric))
cor_matrix <- cor(numcol, use = "complete.obs")
cor_sp <- cor_matrix["SalePrice", ]
cor_sp <- cor_sp[!names(cor_sp) %in% "SalePrice"]
top4 <- names(sort(cor_sp, decreasing = TRUE)[1:4])
formula <- as.formula(paste("SalePrice ~", paste(top4, collapse = " + ")))
reg_model <- lm(formula, data = housing)
summary(reg_model)
model_coefficients <- coef(reg_model)
reg_eq <- paste0(
"SalePrice = ", round(model_coefficients[1], 2), " + ",
paste0(round(model_coefficients[-1], 2), " * ", names(model_coefficients[-1]), collapse = " + ")
)
cat("Regression Equation:\n", regression_equation, "\n\n")
library(broom)
model_summary <- tidy(reg_model)
print(model_summary)
par(mfrow = c(2, 2))
plot(reg_model)
par(mfrow = c(1, 1))
par(mfrow = c(2, 2))
plot(reg_model)
vif_values <- vif(reg_model)
print("VIF Values:")
print(vif_values)
if (any(vif_values > 5)) {
cat("Some variables have VIF > 5, indicating multicollinearity.\n")
} else {
cat("No significant multicollinearity detected (all VIF <= 5).\n")
}
std_residuals <- rstandard(reg_model)
outliers <- which(abs(std_residuals) > 3)
cat("Potential Outliers:\n")
vif(reg_model)
outliers <- which(abs(std_residuals) > 3)
outliers <- which(abs(std_residuals) > 3)
cat("Potential Outliers:\n")
print(outliers)
if (length(outliers) > 0) {
data_no_outliers <- housing[-outliers, ]
reg_model_no_outliers <- lm(formula, data = data_no_outliers)
cat("Model refitted after removing outliers.\n")
} else {
cat("No significant outliers detected.\n")
}
if (exists("reg_model_no_outliers")) {
cat("Summary of Original Model:\n")
summary(reg_model)
cat("Summary of Model Without Outliers:\n")
summary(reg_model_no_outliers)
}
library(leaps)
numeric_columns <- housing %>% select(where(is.numeric))
library(leaps)
numeric_columns <- housing %>% select(where(is.numeric))
all_subsets <- regsubsets(SalePrice ~ ., data = numeric_columns, nvmax = 4)  # Limit to top 4 features
summary_all_subsets <- summary(all_subsets)
cat("Best 1-feature model:\n")
print(names(coef(all_subsets, 1)))
cat("\nBest 2-feature model:\n")
print(names(coef(all_subsets, 2)))
cat("\nBest 3-feature model:\n")
print(names(coef(all_subsets, 3)))
cat("\nBest 4-feature model:\n")
print(names(coef(all_subsets, 4)))
best_4_feature_model <- coef(all_subsets, 4)
coef(all_subsets, 4)
cat("\nBest 4-Feature Model Equation:\n")
print(paste0(
"SalePrice = ", round(best_4_feature_model[1], 2), " + ",
paste0(round(best_4_feature_model[-1], 2), " * ", names(best_4_feature_model[-1]), collapse = " + ")
))
cat("Comparison of Models:\n")
summary(reg_model)
summary(reg_model_no_outliers)
ggplot(data=housing, aes(x=SalePrice))+
geom_boxplot(color = "darkgreen", fill = "lightgreen") +
ggtitle("Boxplot of Sales Price") +
xlab("Sale Price") +
theme(axis.title.x = element_text(color = "darkgreen", size = 10),
axis.title.y = element_text(color = "darkgreen", size = 10),
plot.title = element_text(color = "darkgreen", size = 20))
ggplot(data = housing, aes(x = SalePrice)) +
geom_histogram(aes(fill = Yr.Sold), color = "black") +
facet_grid(Yr.Sold ~., scales = "free") +
ggtitle("Selling Price across Years") +
xlab("Sales Price") +
ylab("Number of Houses") +
theme(axis.title.x = element_text(color = "black", size = 10),
axis.title.y = element_text(color = "black", size = 10),
plot.title = element_text(color = "black", size = 20),)
ggplot(data=housing, aes(x = SalePrice)) +
geom_histogram(fill = "lightgreen", color = "darkgreen") +
ggtitle("Sales Price Distribution") +
xlab("Sales Price") +
ylab("Number of Houses") +
theme(axis.title.x = element_text(color = "darkgreen", size = 10),
axis.title.y = element_text(color = "darkgreen", size = 10),
plot.title = element_text(color = "darkgreen", size = 20))
ggplot(data=housing, aes(x = factor(Neighborhood))) +
geom_bar(fill = "darkgreen") +
ggtitle("Number of Houses across Neighborhoods") +
xlab("Neighborhood") +
ylab("Number of Houses") +
theme(axis.title.x = element_text(color = "darkgreen", size = 10),
axis.title.y = element_text(color = "darkgreen", size = 10),
plot.title = element_text(color = "darkgreen", size = 20),
axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data=housing, aes(x=SalePrice))+
geom_boxplot(color = "darkgreen", fill = "lightgreen") +
ggtitle("Boxplot of Sales Price") +
xlab("Sale Price") +
theme(axis.title.x = element_text(color = "darkgreen", size = 10),
axis.title.y = element_text(color = "darkgreen", size = 10),
plot.title = element_text(color = "darkgreen", size = 20))
ggplot(data = housing, aes(x = SalePrice)) +
geom_histogram(aes(fill = Yr.Sold), color = "black") +
facet_grid(Yr.Sold ~., scales = "free") +
ggtitle("Selling Price across Years") +
xlab("Sales Price") +
ylab("Number of Houses") +
theme(axis.title.x = element_text(color = "black", size = 10),
axis.title.y = element_text(color = "black", size = 10),
plot.title = element_text(color = "black", size = 20),)
ggplot(data=housing, aes(x=SalePrice))+
geom_boxplot(color = "darkgreen", fill = "lightgreen") +
ggtitle("Boxplot of Sales Price") +
xlab("Sale Price") +
theme(axis.title.x = element_text(color = "darkgreen", size = 10),
axis.title.y = element_text(color = "darkgreen", size = 10),
plot.title = element_text(color = "darkgreen", size = 20))
ggplot(data=housing, aes(x = factor(Neighborhood))) +
geom_bar(fill = "darkgreen") +
ggtitle("Number of Houses across Neighborhoods") +
xlab("Neighborhood") +
ylab("Number of Houses") +
theme(axis.title.x = element_text(color = "darkgreen", size = 10),
axis.title.y = element_text(color = "darkgreen", size = 10),
plot.title = element_text(color = "darkgreen", size = 20),
axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(housing, aes(x= .data[[high_cor]], y = SalePrice)) +
geom_point(color = "darkblue", alpha = 0.6) +
ggtitle(paste("Scatter Plot: SalePrice vs", high_cor)) +
xlab(high_cor) +
ylab("SalePrice")
ggplot(housing, aes(x= .data[[low_cor]], y = SalePrice)) +
geom_point(color = "darkblue", alpha = 0.3) +
ggtitle(paste("Scatter Plot: SalePrice vs", low_cor)) +
xlab(low_cor) +
ylab("SalePrice")
ggplot(housing, aes(x= .data[[close_cor]], y = SalePrice)) +
geom_point(color = "darkblue", alpha = 0.6) +
ggtitle(paste("Scatter Plot: SalePrice vs", close_cor)) +
xlab(close_cor) +
ylab("SalePrice")
numcol <- housing %>% select(where(is.numeric))
cor_matrix <- cor(numcol, use = "complete.obs")
cor_sp <- cor_matrix["SalePrice", ]
cor_sp <- cor_sp[!names(cor_sp) %in% "SalePrice"]
top4 <- names(sort(cor_sp, decreasing = TRUE)[1:4])
formula <- as.formula(paste("SalePrice ~", paste(top4, collapse = " + ")))
reg_model <- lm(formula, data = housing)
summary(reg_model)
library(broom)
model_coefficients <- coef(reg_model)
reg_eq <- paste0(
"SalePrice = ", round(model_coefficients[1], 2), " + ",
paste0(round(model_coefficients[-1], 2), " * ", names(model_coefficients[-1]), collapse = " + ")
)
cat("Regression Equation:\n", regression_equation, "\n\n")
library(broom)
model_summary <- tidy(reg_model)
print(model_summary)
par(mfrow = c(2, 2))
plot(reg_model)
par(mfrow = c(1, 1))
library(car)
vif_values <- vif(reg_model)
ggplot(housing, aes(x= .data[[close_cor]], y = SalePrice)) +
geom_point(color = "darkblue", alpha = 0.6) +
ggtitle(paste("Scatter Plot: SalePrice vs", close_cor)) +
xlab(close_cor) +
ylab("SalePrice")
ggcorrplot(newdata_matrix,
colors = c("blue", "white", "darkgreen"),
lab = TRUE,
title = "Correlation Matrix",
legend.title = "Correlation") +
theme(
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 1, size = 8, color = "black"),
axis.text.y = element_text(size = 8, color = "black"),
plot.title = element_text(size = 15, face = "bold", hjust = 0.5)
)
print(newdata_matrix)
ggcorrplot(newdata_matrix, method = "square", type = "upper", lab = TRUE, lab_size = 3,
title = "Correlation Matrix",
colors = c("lightgreen", "white", "blue"),
legend.title = "Correlation")
ggcorrplot(newdata_matrix,
colors = c("blue", "white", "darkgreen"),
lab = TRUE,
title = "Correlation Matrix",
legend.title = "Correlation") +
theme(
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 1, size = 8, color = "black"),
axis.text.y = element_text(size = 8, color = "black"),
plot.title = element_text(size = 15, face = "bold", hjust = 0.5)
)
ggcorrplot(newdata_matrix,
colors = c("darkgreen", "white", "blue"),
lab = TRUE,
title = "Correlation Matrix",
legend.title = "Correlation") +
theme(
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 1, size = 8, color = "black"),
axis.text.y = element_text(size = 8, color = "black"),
plot.title = element_text(size = 15, face = "bold", hjust = 0.5)
)
# Compute the correlation matrix
cor_matrix <- cor(numeric_columns, use = "complete.obs")
cor_matrix
cor_sp <- cor_matrix["SalePrice",]
par(mfrow = c(2, 2))
plot(reg_model)
par(mfrow = c(1, 1))
summary(reg_model_no_outliers)
cat("Comparison of Models:\n")
summary(reg_model)
summary(reg_model_no_outliers)
best_4_feature_model <- coef(all_subsets, 4)
cat("\nBest 4-Feature Model Equation:\n")
print(paste0(
"SalePrice = ", round(best_4_feature_model[1], 2), " + ",
paste0(round(best_4_feature_model[-1], 2), " * ", names(best_4_feature_model[-1]), collapse = " + ")
))
numcol<- housing %>% select(where(is.numeric))
all_subsets <- regsubsets(SalePrice ~ ., data = numcol, nvmax = 4)
summary_all_subsets <- summary(all_subsets)
housing <- read.csv(file.choose())
options(scipen = 100)
library(ggplot2)
library(dplyr)
library(ggcorrplot)
head(housing)
tail(housing)
str(housing)
summary(housing)
colnames(housing)
sum(is.na(housing))
colSums(is.na(housing))
ggplot(data=housing, aes(x = SalePrice)) +
geom_histogram(fill = "lightgreen", color = "darkgreen") +
ggtitle("Sales Price Distribution") +
xlab("Sales Price") +
ylab("Number of Houses") +
theme(axis.title.x = element_text(color = "darkgreen", size = 10),
axis.title.y = element_text(color = "darkgreen", size = 10),
plot.title = element_text(color = "darkgreen", size = 20))
